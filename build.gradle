plugins {
	id 'org.springframework.boot' version '2.6.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.google.protobuf" version "0.8.19"
	id "io.freefair.lombok" version "6.3.0"
	id "idea"
}

group = 'io.github.s7i'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	grcpVersion= '1.51.0'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.13'
	implementation 'com.h2database:h2:2.1.214'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'net.devh:grpc-spring-boot-starter:2.14.0.RELEASE'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'com.google.protobuf:protobuf-java:3.21.9'
	implementation "io.grpc:grpc-stub:$grcpVersion"
	implementation "io.grpc:grpc-protobuf:$grcpVersion"
	if (JavaVersion.current().isJava9Compatible()) {
		// Workaround for @javax.annotation.Generated
		// see: https://github.com/grpc/grpc-java/issues/3633
		implementation 'javax.annotation:javax.annotation-api:1.3.1'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

test {
	useJUnitPlatform()
}

protobuf {
	protoc {
		// The artifact spec for the Protobuf Compiler
		artifact = 'com.google.protobuf:protoc:3.0.0'
	}
	plugins {
		// Optional: an artifact spec for a protoc plugin, with "grpc" as
		// the identifier, which can be referred to in the "plugins"
		// container of the "generateProtoTasks" closure.
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:$grcpVersion"
		}
	}
	generateProtoTasks {
		ofSourceSet('main')*.plugins {
			// Apply the "grpc" plugin whose spec is defined above, without
			// options.  Note the braces cannot be omitted, otherwise the
			// plugin will not be added. This is because of the implicit way
			// NamedDomainObjectContainer binds the methods.
			grpc {}
		}
		all().each { task ->
			// If true, will generate a descriptor_set.desc file under
			// $generatedFilesBaseDir/$sourceSet. Default is false.
			// See --descriptor_set_out in protoc documentation about what it is.
			task.generateDescriptorSet = true

			// Allows to override the default for the descriptor set location
			task.descriptorSetOptions.path = "${projectDir}/build/descriptors/${task.sourceSet.name}.desc"

			// If true, the descriptor set will contain line number information
			// and comments. Default is false.
			task.descriptorSetOptions.includeSourceInfo = false

			// If true, the descriptor set will contain all transitive imports and
			// is therefore self-contained. Default is false.
			task.descriptorSetOptions.includeImports = true
		}
	}
}

idea {
	module {
		// proto files and generated Java files are automatically added as
		// source dirs.
		// If you have additional sources, add them here:
		//sourceDirs += file("/path/to/other/sources");
	}
}
